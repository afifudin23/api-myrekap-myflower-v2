// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// RULES
// Menggunakan Snake Case

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id               String            @id @default(cuid())
  userCode         String            @unique @map("user_code")
  fullName         String            @map("full_name")
  username         String            @unique @map("username")
  email            String            @unique @map("email")
  password         String            @map("password")
  phoneNumber      String            @map("phone_number")
  customerCategory CustomerCategory? @map("customer_category")
  role             Role              @map("role")
  isVerified       Boolean           @default(false) @map("is_verified")
  createdAt        DateTime          @default(now()) @map("created_at")
  updatedAt        DateTime          @updatedAt @map("updated_at")

  cartItems CartItem[]
  orders    Order[]
  reviews   Review[]
  otp       UserOtp[]

  @@map("users")
}

model UserOtp {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  code      String   @map("code")
  type      OtpType  @map("type")
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_otp")
}

enum OtpType {
  EMAIL_VERIFICATION @map("email_verification")
  PASSWORD_RESET     @map("password_reset")
}

enum Role {
  ADMIN      @map("admin")
  SUPERADMIN @map("superadmin")
  CUSTOMER   @map("customer")
}

model Product {
  id          String   @id @default(cuid())
  productCode String   @unique @map("product_code")
  name        String   @unique @map("name")
  price       Int      @map("price")
  stock       Int      @default(0) @map("stock")
  description String   @map("description")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")

  images       ProductImage[]
  cartItems    CartItem[]
  orderItems   OrderItem[]
  reviews      Review[]
  transactions StockTransaction[]
  reports      MonthlyStockReport[]

  @@map("products")
}

model StockTransaction {
  id        String    @id @default(cuid())
  productId String    @map("product_id")
  type      StockType @map("type")
  quantity  Int       @map("quantity")
  note      String    @map("note")
  createdAt DateTime  @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("stock_transactions")
}

enum StockType {
  STOCK_IN  @map("stock_in")
  STOCK_OUT @map("stock_out")
}

model MonthlyStockReport {
  id           String   @id @default(cuid())
  productId    String   @map("product_id")
  month        Int      @map("month")
  year         Int      @map("year")
  initialStock Int      @map("initial_stock")
  stockIn      Int      @map("stock_in")
  stockOut     Int      @map("stock_out")
  finalStock   Int      @map("final_stock")
  createdAt    DateTime @default(now()) @map("created_at")

  product Product @relation(fields: [productId], references: [id])

  @@map("monthly_stock_reports")
}

model ProductImage {
  id        String @id @default(cuid())
  fileName  String @map("file_name")
  size      Int    @map("size")
  publicId  String @map("public_id")
  secureUrl String @map("secure_url")
  productId String @map("product_id")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CartItem {
  id        String @id @default(cuid())
  userId    String @map("user_id")
  productId String @map("product_id")
  quantity  Int    @map("quantity")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("cart_items")
}

model Order {
  id        String @id @default(cuid())
  source    Source @map("source")
  orderCode String @unique @map("order_code")
  userId    String @map("user_id")

  // Customer
  customerName     String           @map("customer_name")
  customerCategory CustomerCategory @default(UMUM) @map("customer_category")
  phoneNumber      String           @map("phone_number")
  deliveryOption   DeliveryOption   @map("delivery_option")
  readyDate        DateTime         @map("ready_date")

  // Delivery
  shippingCost    Int     @default(0) @map("shipping_cost")
  deliveryAddress String? @map("delivery_address")

  // Payment
  totalPrice      Int            @map("total_price")
  paymentMethod   PaymentMethod? @map("payment_method")
  paymentProvider String?        @map("payment_provider")

  // Status
  paymentStatus         PaymentStatus  @default(PENDING) @map("payment_status")
  orderStatus           OrderStatus    @default(IN_PROCESS) @map("order_status")
  orderDate             DateTime       @default(now()) @map("order_date")

  // Relation
  user   User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  images OrderImage[]
  items  OrderItem[]

  @@map("orders")
}

model OrderItem {
  id         String  @id @default(cuid())
  orderId    String  @map("order_id")
  productId  String  @map("product_id")
  quantity   Int     @map("quantity")
  message    String? @map("message")
  unitPrice  Int     @map("unit_price")
  totalPrice Int     @map("total_price")

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model OrderImage {
  id        String         @id @default(cuid())
  orderId   String         @map("order_id")
  type      OrderImageType @map("type")
  fileName  String         @map("file_name")
  size      Int            @map("size")
  publicId  String         @map("public_id")
  secureUrl String         @map("secure_url")

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@unique([orderId, type])
  @@map("order_images")
}

enum OrderImageType {
  PAYMENT_PROOF    @map("payment_proof")
  FINISHED_PRODUCT @map("finished_product")
}

model Review {
  id        String @id @default(cuid())
  rating    Int    @map("rating")
  comment   String @map("comment")
  userId    String @map("user_id")
  productId String @map("product_id")

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

enum Source {
  MYREKAP  @map("myrekap")
  MYFLOWER @map("myflower")
}

enum DeliveryOption {
  DELIVERY    @map("delivery")
  SELF_PICKUP @map("self_pickup")
}

enum CustomerCategory {
  UMUM           @map("umum")
  PEMDA          @map("pemda")
  PERBANKAN      @map("perbankan")
}

enum PaymentMethod {
  COD           @map("cod")
  CASH          @map("cash")
  BANK_TRANSFER @map("bank_transfer")
  CREDIT_CARD   @map("credit_card")
  CSTORE        @map("cstore")
  QRIS          @map("qris")
  EWALLET       @map("ewallet")
}

enum OrderStatus {
  IN_PROCESS @map("in_process")
  DELIVERY   @map("delivery")
  COMPLETED  @map("completed")
  CANCELED   @map("canceled")
}

enum PaymentStatus {
  PENDING  @map("pending")
  UNPAID   @map("unpaid")
  PAID     @map("paid")
  EXPIRED  @map("expired")
  REFUNDED @map("refunded")
  DENIED   @map("denied")
}
